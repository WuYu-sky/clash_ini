# 必读！！！
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# 机场订阅
proxy-providers:
  宝可梦:
    url: "https://52pokemon.sdnlv0.cn/api/v1/client/subscribe?token=659821af626ff86bcd638fb2676bc77c"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

# 节点信息
proxies:
  - {name: 直连, type: direct}
  - name: "【自建】LA洛杉矶ss"
    type: ss
    server: "192.161.163.33"
    port: 80
    cipher: 2022-blake3-aes-128-gcm
    password: "sCC4KvYBUgo6QVcinx8bOA=="
    udp: true

  - name: "【自建】LA洛杉矶vless"
    type: vless
    server: "192.161.163.33"
    port: 443
    udp: true
    uuid: "91bd530d-9ddd-47c1-8b3a-922e7cd209be"
    flow: xtls-rprx-vision
    packet-encoding: xudp
    tls: true
    servername: "updates.cdn-apple.com"
    client-fingerprint: chrome
    reality-opts:
      public-key: "9zJkpMNFOgyZF0NyeIRNsCaZ3u5Fl3A_UVoQFHPbNhQ"
      short-id: "c73d15dbeaec4c23"
    skip-cert-verify: false
  
  - name: "【自建】LA洛杉矶hy2"
    type: hysteria2
    server: la.wuyu666.online
    port: 52021
    password: "17c023d6-e168-4c2f-a6be-a290fa6f970c"
    up: "100 Mbps"
    down: "800 Mbps"
    client-fingerprint: chrome
    alpn:
      - h3
    skip-cert-verify: false
    
  - name: "【自建】土耳其ss"
    dialer-proxy: 🇺🇸 美国自动
    type: ss
    server: "154.53.164.193"
    port: 22320
    cipher: "2022-blake3-aes-128-gcm"
    password: "UETm2mAIRiCaVJuIe1t0cA=="
    udp: true

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板，external-ui 路径如果出现报错，根据你使用的插件进行调整，比如openclash改为： /etc/openclash/run/ui  ，裸核跑改为/etc/mihomo/run/ui
# 因容易造成新手面板启动问题，我注释掉了，需要的自行开启
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/nikki/run/ui"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: false
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"


# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 101.226.4.6
    - 119.29.29.29
 
# 出站策略，根据自己情况调整每个策略里分组排序，增删都可以，比如把美国自动放到第一个，比如删除香港故转，注意别漏掉表情逗号等。
# 如果相应分组没有筛选到对应的国家，请根据自己节点名字调整筛选关键字。
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [♻️ 机场自动, 🐽 自建节点 ,🇭🇰 香港自动, 🇺🇸 美国自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇸🇬 新加坡自动, 🇬🇧 英国自动, 🇦🇺 澳大利亚自动, 🇹🇷 土耳其自动, 直连]}
  - {name: 📹 YouTube, type: select, proxies: [♻️ 机场自动, 🐽 自建节点 ,🇭🇰 香港自动, 🇺🇸 美国自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇸🇬 新加坡自动, 🇬🇧 英国自动, 🇦🇺 澳大利亚自动, 🇹🇷 土耳其自动, 直连]}
  - {name: 🍀 Google, type: select, proxies: [♻️ 机场自动, 🐽 自建节点 ,🇭🇰 香港自动, 🇺🇸 美国自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇸🇬 新加坡自动, 🇬🇧 英国自动, 🇦🇺 澳大利亚自动, 🇹🇷 土耳其自动, 直连]}
  - {name: ✨ Microsoft, type: select, proxies: [🇹🇷 土耳其自动, ♻️ 机场自动, 直连]}
  - {name: 🤖 AI, type: select, proxies: [♻️ 机场自动, 🐽 自建节点 ,🇭🇰 香港自动, 🇺🇸 美国自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇸🇬 新加坡自动, 🇬🇧 英国自动, 🇦🇺 澳大利亚自动, 🇹🇷 土耳其自动, 直连]}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [♻️ 机场自动, 🐽 自建节点 ,🇭🇰 香港自动, 🇺🇸 美国自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇸🇬 新加坡自动, 🇬🇧 英国自动, 🇦🇺 澳大利亚自动, 🇹🇷 土耳其自动, 直连]}
  - {name: 📲 Telegram, type: select, proxies: [♻️ 机场自动, 🐽 自建节点 ,🇭🇰 香港自动, 🇺🇸 美国自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇸🇬 新加坡自动, 🇬🇧 英国自动, 🇦🇺 澳大利亚自动, 🇹🇷 土耳其自动, 直连]}
  - {name: 🎥 NETFLIX, type: select, proxies: [♻️ 机场自动, 🐽 自建节点 ,🇭🇰 香港自动, 🇺🇸 美国自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇸🇬 新加坡自动, 🇬🇧 英国自动, 🇦🇺 澳大利亚自动, 🇹🇷 土耳其自动, 直连]}
  - {name: ✈️ Speedtest, type: select, proxies: [♻️ 机场自动, 🐽 自建节点 ,🇭🇰 香港自动, 🇺🇸 美国自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇸🇬 新加坡自动, 🇬🇧 英国自动, 🇦🇺 澳大利亚自动, 🇹🇷 土耳其自动, 直连]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [♻️ 机场自动, 🐽 自建节点, 直连]}
  
  - {name: 🐽 自建节点, type: select, include-all: true, filter: "(?=.*(自建))"}
  - {name: ♻️ 机场自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^(?!直连$)(?!.*自建).*$"}
  - {name: 🇭🇰 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美|英|澳|土)).)*$"}
  - {name: 🇺🇸 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)America|States|纽约|洛杉矶))^((?!(港|台|日|韩|新|英|澳|土)).)*$"}
  - {name: 🇯🇵 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan|东京|大阪))^((?!(港|台|韩|新|美|英|澳|土)).)*$"}
  - {name: 🇰🇷 韩国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(韩|KR|(?i)Korea|首尔|서울))^((?!(港|台|日|新|美|英|澳|土)).)*$"}
  - {name: 🇸🇬 新加坡自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新|SG|(?i)Singapore|狮城|叻坡))^((?!(港|台|日|韩|美|英|澳|土)).)*$"}
  - {name: 🇬🇧 英国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(英|UK|(?i)Britain|England|伦敦))^((?!(港|台|日|韩|新|美|澳|土)).)*$"}
  - {name: 🇦🇺 澳大利亚自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(澳|AU|(?i)Australia|悉尼|墨尔本))^((?!(港|台|日|韩|新|美|英|土)).)*$"}
  - {name: 🇹🇷 土耳其自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(土|TR|(?i)Turkey|伊斯坦布尔))^((?!(港|台|日|韩|新|美|英|澳)).)*$"}


rules:
  - SRC-IP-CIDR,192.168.10.123/32,✨ Microsoft
  - DOMAIN-SUFFIX,linux.do,直连
  - RULE-SET,private_domain,直连
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 AI
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,microsoft_domain,✨ Microsoft
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
